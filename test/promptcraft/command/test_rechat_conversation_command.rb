require "test_helper"

module Promptcraft::Command
  class TestRechatConversationCommand < Minitest::Test
    def setup
      VCR.turn_off!
    end

    def teardown
      VCR.turn_on!
    end

    def test_one_message_missing_assistant
      prompt = "I solve math problems"
      convo = Promptcraft::Conversation.new(prompt)
      convo.add_message(role: "user", content: "What is 2 + 2?")

      llm = Promptcraft::Llm.langchain(provider: "openai")

      stub_request(:post, "https://api.openai.com/v1/chat/completions")
        .with(
          body: {messages: [{role: "system", content: "I solve math problems"}, {role: "user", content: "What is 2 + 2?"}], model: "gpt-3.5-turbo", n: 1, temperature: 0.0}.to_json
        )
        .to_return(status: 200, body: {"choices" => [{"message" => {"role" => "assistant", "content" => "2 + 2 is 4."}}]}.to_json, headers: {"Content-Type" => "application/json"})

      command = RechatConversationCommand.new(prompt:, conversation: convo, llm:)
      command.execute
    end

    def test_one_message_replay_assistant
      llm = Promptcraft::Llm.langchain(provider: "openai")
      convo = Promptcraft::Conversation.new("I solve math problems")
      convo.add_message(role: "user", content: "What is 2 + 2?")
      convo.add_message(role: "assistant", content: "2 + 2 is 4.")

      # The assistant message should be removed from the messages list
      # and replaced with a new message generated by the LLM
      #
      # Pass in a different system prompt to encourage a different response
      prompt = "When asked a question, I reply with a question."

      command = RechatConversationCommand.new(prompt:, conversation: convo, llm:)

      stub_request(:post, "https://api.openai.com/v1/chat/completions")
        .with(
          body: {messages: [
            {role: "system", content: prompt},
            {role: "user", content: "What is 2 + 2?"}
          ], model: "gpt-3.5-turbo", n: 1, temperature: 0.0}.to_json
        )
        .to_return(
          status: 200,
          headers: {"Content-Type" => "application/json"},
          body:
            {"choices" => [{"message" => {"role" => "assistant", "content" => "If you have two apples and two oranges, how many do you have?"}}]}.to_json
        )

      pp command.execute
    end
  end
end
